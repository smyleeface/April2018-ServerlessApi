service: microb-challenge

provider:
  name: aws
  runtime: dotnetcore2.0
  profile: ${opt:profile, 'default'}
  timeout: 30
  versionFunctions: false
  stage: dev
  region: us-east-1
  apiKeys:
    - hehehehehe
  usagePlan:
    quota:
      limit: 5000
      offset: 2
      period: MONTH
    throttle:
      burstLimit: 200
      rateLimit: 100
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "dynamodb:*"
      Resource:
        - Fn::GetAtt: [ DynamoDBTable, Arn ]
        - Fn::Join: ["/", [ Fn::GetAtt: [DynamoDBTable, Arn], "index", "*"]]

# you can define service wide environment variables here
  environment:
    STAGE_NAME: ${self:custom.stageName}
    DYNAMO_TABLE_NAME:
      Ref: DynamoDBTable

# Custom values that can be referenced in the Cloud Formation template
custom:
  stageName: ${opt:stage, self:provider.stage}
  
  
package:
  artifact: bin/release/netcoreapp2.0/deploy-package.zip
  

functions:

  # functions
  list-microb:
    handler: ServerlessApi::Microb.List.Function::LambdaHandler # Assembly::Namespace.ClassName::MethodName
    events:
      - http:
          path: "items"
          method: "get"
          private: true
          cors: true
  create-microb:
    handler: ServerlessApi::Microb.Create.Function::LambdaHandler # Assembly::Namespace.ClassName::MethodName
    events:
      - http:
          path: "item"
          method: "post"
          private: true
          cors: true
  update-microb:
    handler: ServerlessApi::Microb.Update.Function::LambdaHandler # Assembly::Namespace.ClassName::MethodName
    events:
      - http:
          path: "items/{id}"
          method: "put"
          private: true
          cors: true
  delete-microb:
    handler: ServerlessApi::Microb.Delete.Function::LambdaHandler # Assembly::Namespace.ClassName::MethodName
    events:
      - http:
          path: "items/{id}"
          method: "delete"
          private: true
          cors: true
  read-microb:
    handler: ServerlessApi::Microb.Read.Function::LambdaHandler # Assembly::Namespace.ClassName::MethodName
    events:
      - http:
          path: "items/{id}"
          method: "get"
          private: true
          cors: true
          
# you can add CloudFormation resource templates here
resources:
  Parameters: ${file(infrastructure/microb-table_cfn.yml):Parameters}
  Resources:
    DynamoDBTable: ${file(infrastructure/microb-table_cfn.yml):Resources.DynamoDBTable}
    S3Role: ${file(infrastructure/static-website_cfn.yml):Resources.S3Role}
    WebsiteBucket: ${file(infrastructure/static-website_cfn.yml):Resources.WebsiteBucket}
    WebsiteBucketPolicy: ${file(infrastructure/static-website_cfn.yml):Resources.WebsiteBucketPolicy}
